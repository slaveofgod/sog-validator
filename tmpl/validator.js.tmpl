Object.assign(sogv, function () {
    'use strict';

    /**
     * @constructor
     * @name sogv.%ClassName%
     * @extends sogv.AbstractValidator
     * @classdesc
     * <p>%ClassDescription%</p>
     * @description
     * <p>Create a new Validator.</p>
     * @param {*} data The data which needs to be validated.
     * @param {Object} options The setting options
     * @param {Object} optionRules The validation rules for setting options.
     * @param {String} lang The language used by the application. Default: "<code>en</code>".
     * @param {Boolean} internal If this parameter is true, it means, that validation called from core.
     * @property {Array} alias
     * <p>The aliases for the current validator.</p>
     * <p>They could be used in the short validation format.</p>
     * <p>Defined aliases: ['<code>%Alias%</code>'].</p>
     * @property {Object} options The description of the required options.
     * @example
     * var validator = new sogv.%ClassName%(data);
     * if (false === validator.isValid()) {
     *      validator.errors().first();
     * }
     */

    // PROPERTIES

    /**
     * @name sogv.%ClassName%#property
     * @type {Type}
     * @description
     * <p>Property description.</p>
     */

    var %ClassName% = function (data, options, optionRules, lang, internal) {
        sogv.AbstractValidator.call(this, data, options, {
            property: optionRules.property || 'required|string',
        }, lang, internal);

        this.property = this.__options.property;
        this.message = '%ErrorMessage%';

        this.name = '%ClassName%';
    };
    %ClassName%.prototype = Object.create(sogv.AbstractValidator.prototype);
    %ClassName%.prototype.constructor = %ClassName%;

    Object.defineProperty(%ClassName%.prototype, 'alias', {
        get: function () {
            return [
                '%Alias%'
            ];
        }
    });

    Object.defineProperty(%ClassName%.prototype, 'options', {
        get: function () {
            return [
                {
                    'name': 'property',
                    'type': 'string'
                }
            ];
        }
    });

    Object.assign(%ClassName%.prototype, {
        /**
         * @private
         * @function
         * @name sogv.%ClassName%#__validate
         * @description
         * <p>Validate data.</p>
         */
        __validate: function () {

            // Write your validation rules here ...
            // This is just an example.
            // Validated data is contained in "this.data" variable
            var status = true;
            if (null === this.data) {
                var status = false;
            }

            if (false === status) {
                this.__setErrorMessage(this.message, this.__messageParameters());
                return ;
            }
        },

        /**
         * @private
         * @function
         * @name sogv.%ClassName%#__beforeValidate
         * @description
         * <p>Execute before validation is running.</p>
         */
        __beforeValidate: function () {
            // Cancel validation if data is empty
            if (true === this.__isEmptyData()) {
                this.__skip = true;
                return ;
            }
        },

        /**
         * @private
         * @function
         * @name sogv.%ClassName%#__messageParameters
         * @description
         * <p>Returned parameters for error message which needs to be replaced.</p>
         * @returns {Object} List of parameters.
         */
        __messageParameters: function () {
            return {
                'property': this.property
            }
        }
    });

    return {
        %ClassName%: %ClassName%
    };
}());

sogv.registry(sogv.%ClassName%);